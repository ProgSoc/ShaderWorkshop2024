#version 300 es

precision highp float;

in vec2 vUv;
out vec4 FragColor;

uniform sampler2D tex;
uniform float spread;

void main() {
    const vec2 POINTS[64] = vec2[64](
        vec2(-0.003881274, 0.000928915),
        vec2(-0.000865569, -0.002880188),
        vec2(0.001102385, 0.001859909),
        vec2(0.001759688, 0.002589512),
        vec2(-0.001659685, -0.000329540),
        vec2(-0.001822142, 0.001220218),
        vec2(0.003623614, -0.001292130),
        vec2(-0.003551945, -0.001451195),
        vec2(0.002163543, -0.001341711),
        vec2(0.002203958, -0.002163799),
        vec2(0.001143628, -0.003571097),
        vec2(0.003261412, 0.001874330),
        vec2(-0.003474127, 0.000292293),
        vec2(-0.002781102, -0.001327407),
        vec2(0.002523564, 0.000038062),
        vec2(0.002036824, 0.003413932),
        vec2(-0.003587476, 0.001729648),
        vec2(-0.001293790, 0.003659394),
        vec2(0.000828157, 0.003820023),
        vec2(0.001193215, -0.002256466),
        vec2(0.000501027, 0.002707031),
        vec2(0.001602391, -0.000137347),
        vec2(0.002787795, 0.000810632),
        vec2(-0.001923072, -0.001046660),
        vec2(0.003049630, -0.002229524),
        vec2(-0.002909376, 0.002468441),
        vec2(0.003385159, -0.000217441),
        vec2(0.000960226, 0.000953568),
        vec2(-0.003560805, -0.000578855),
        vec2(-0.000306052, -0.002356705),
        vec2(0.001736706, 0.000814865),
        vec2(-0.001486662, -0.002186416),
        vec2(0.000385958, -0.001315065),
        vec2(-0.000377918, -0.001417942),
        vec2(-0.002676844, 0.000849090),
        vec2(-0.000992923, 0.001142590),
        vec2(0.002858903, -0.000775745),
        vec2(0.001124452, -0.000808151),
        vec2(-0.001081824, 0.002810300),
        vec2(0.001917646, -0.003381449),
        vec2(0.002532672, 0.002741359),
        vec2(0.000043204, 0.002074181),
        vec2(-0.000232631, -0.003496559),
        vec2(0.000538786, -0.002677191),
        vec2(-0.000620908, -0.000672050),
        vec2(-0.000038334, 0.001324119),
        vec2(-0.000333107, 0.003898435),
        vec2(-0.002566757, -0.002968814),
        vec2(-0.000990887, -0.003798673),
        vec2(-0.001278396, -0.001460586),
        vec2(-0.002363481, 0.003152404),
        vec2(0.000504303, 0.000322797),
        vec2(-0.001291619, 0.000403593),
        vec2(-0.002741111, -0.002216616),
        vec2(0.003758870, 0.000721322),
        vec2(-0.000958781, 0.002056650),
        vec2(-0.001718005, -0.003391369),
        vec2(-0.000282554, 0.000168061),
        vec2(0.000391012, -0.000496907),
        vec2(-0.002569915, -0.000183321),
        vec2(-0.002158593, 0.002337736),
        vec2(-0.002784751, 0.001665443),
        vec2(-0.000211191, 0.003141459),
        vec2(0.002482065, 0.001614450)
    );
    
    const float WEIGHTS[64] = float[64](
        0.012345038,
        0.015307326,
        0.017547290,
        0.014949283,
        0.018569206,
        0.017473627,
        0.012787556,
        0.012818723,
        0.016584087,
        0.015072473,
        0.013086536,
        0.013050066,
        0.013889520,
        0.015092703,
        0.016641860,
        0.012392808,
        0.012370333,
        0.012682144,
        0.012597867,
        0.016566322,
        0.016024726,
        0.018730428,
        0.015604731,
        0.017482054,
        0.013000772,
        0.012884833,
        0.014173833,
        0.019177721,
        0.013521458,
        0.017021661,
        0.018101111,
        0.016322140,
        0.019149553,
        0.018985679,
        0.015871524,
        0.018903964,
        0.015436828,
        0.019126144,
        0.015296118,
        0.012663726,
        0.013140276,
        0.017751592,
        0.013835350,
        0.016085639,
        0.019782868,
        0.019223660,
        0.012585929,
        0.012549270,
        0.012545476,
        0.018051709,
        0.012501678,
        0.020081006,
        0.019177815,
        0.013771922,
        0.012847946,
        0.017288986,
        0.012927079,
        0.020238780,
        0.020055114,
        0.016502938,
        0.014799397,
        0.014613726,
        0.014897381,
        0.015440692
    );
    
    const int POINTS_COUNT = 64;
    const float RADIUS = 0.004000000;
    const float TOTAL_WEIGHT = 1.000000000;

    vec3 col = vec3(0.);

    for (int i = 0; i < POINTS_COUNT; i++) {
        col += (texture(tex, vUv + POINTS[i] * spread).rgb) * WEIGHTS[i];
    }

    FragColor = vec4(max(col, 0.), 1.);
}